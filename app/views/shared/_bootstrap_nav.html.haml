-# This template is i18n-ready: if you don't use i18n, then you can replace the pagy_t
-# calls with the actual strings ("&lsaquo; Prev", "Next &rsaquo;", "&hellip;").

-# The link variable is set to a proc that returns the link tag.
-# Usage: link.call( page_number [, text [, extra_attributes_string ]])

- link = pagy_link_proc(pagy, link_extra: 'class="page-link"')
- prev_tag = tag.span '&laquo;', aria: { hidden: true }, escape_attributes: false
- next_tag = tag.span '&raquo;', aria: { hidden: true }, escape_attributes: false

%nav.pagy-bootstrap-nav{"aria-label" => "pager", :role => "navigation"}

  %ul.pagination

    - if pagy.prev
      %li.page-item.prev!= link.call(pagy.prev, prev_tag, 'aria-label="previous"')
    - else
      %li.page-item.prev.disabled
        %a.page-link{:href => '#'}!= prev_tag

    - pagy.series.each do |item|                      # series example: [1, :gap, 7, 8, "9", 10, 11, :gap, 36]
      - if item.is_a?(Integer)                        # page link
        %li.page-item!= link.call(item)

      - elsif item.is_a?(String)                      # current page
        %li.page-item.active!= link.call(item)

      - elsif item == :gap                            # page gap
        %li.page-item.disabled.gap
          %a.page-link{:href => "#"}!= pagy_t('pagy.nav.gap')

    - if pagy.next
      %li.page-item.next!= link.call(pagy.next, next_tag, 'aria-label="next"')
    - else
      %li.page-item.next.disabled
        %a.page-link{:href => '#'}!= next_tag